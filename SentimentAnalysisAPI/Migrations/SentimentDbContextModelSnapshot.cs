// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace SentimentAnalysisAPI.Migrations
{
    [DbContext(typeof(SentimentDbContext))]
    partial class SentimentDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Sentiment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ImageDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("LoveCount")
                        .HasColumnType("int");

                    b.Property<int>("Reposts")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Sentiments");
                });

            modelBuilder.Entity("SentimentAnalysisResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Analysis")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("SentimentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SentimentId")
                        .IsUnique();

                    b.ToTable("SentimentAnalysisResults");
                });

            modelBuilder.Entity("SentimentTag", b =>
                {
                    b.Property<int>("SentimentId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("SentimentId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("SentimentTags");
                });

            modelBuilder.Entity("Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Sentiment", b =>
                {
                    b.HasOne("Category", "Category")
                        .WithMany("Sentiments")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SentimentAnalysisResult", b =>
                {
                    b.HasOne("Sentiment", "Sentiment")
                        .WithOne("AnalysisResult")
                        .HasForeignKey("SentimentAnalysisResult", "SentimentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sentiment");
                });

            modelBuilder.Entity("SentimentTag", b =>
                {
                    b.HasOne("Sentiment", "Sentiment")
                        .WithMany("SentimentTags")
                        .HasForeignKey("SentimentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tag", "Tag")
                        .WithMany("SentimentTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sentiment");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Category", b =>
                {
                    b.Navigation("Sentiments");
                });

            modelBuilder.Entity("Sentiment", b =>
                {
                    b.Navigation("AnalysisResult")
                        .IsRequired();

                    b.Navigation("SentimentTags");
                });

            modelBuilder.Entity("Tag", b =>
                {
                    b.Navigation("SentimentTags");
                });
#pragma warning restore 612, 618
        }
    }
}
